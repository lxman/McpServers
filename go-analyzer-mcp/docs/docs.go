// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/go/analyze": {
            "post": {
                "description": "Analyze Go code for errors and warnings using go vet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Go Analyzer"
                ],
                "summary": "Analyze Go code",
                "parameters": [
                    {
                        "description": "Code to analyze",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.AnalyzeCodeInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analyzer.AnalyzeCodeOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/go/format": {
            "post": {
                "description": "Format Go code using gofmt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Go Analyzer"
                ],
                "summary": "Format Go code",
                "parameters": [
                    {
                        "description": "Code to format",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.FormatCodeInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analyzer.FormatCodeOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/go/metrics": {
            "post": {
                "description": "Calculate code metrics including cyclomatic complexity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Go Analyzer"
                ],
                "summary": "Calculate metrics",
                "parameters": [
                    {
                        "description": "Code to analyze",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.CalculateMetricsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analyzer.CalculateMetricsOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/go/symbols": {
            "post": {
                "description": "Extract symbols (functions, types, variables) from Go code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Go Analyzer"
                ],
                "summary": "Extract symbols",
                "parameters": [
                    {
                        "description": "Code to analyze",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.GetSymbolsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analyzer.GetSymbolsOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/description": {
            "get": {
                "description": "Returns the complete OpenAPI 3.0 specification",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documentation"
                ],
                "summary": "Get OpenAPI specification",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "analyzer.AnalyzeCodeInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                }
            }
        },
        "analyzer.AnalyzeCodeOutput": {
            "type": "object",
            "properties": {
                "diagnostics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analyzer.Diagnostic"
                    }
                },
                "error_count": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "warning_count": {
                    "type": "integer"
                }
            }
        },
        "analyzer.CalculateMetricsInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "analyzer.CalculateMetricsOutput": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "function_metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analyzer.FunctionMetrics"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/analyzer.CodeMetrics"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "analyzer.CodeMetrics": {
            "type": "object",
            "properties": {
                "average_complexity": {
                    "type": "number"
                },
                "blank_lines": {
                    "type": "integer"
                },
                "comment_lines": {
                    "type": "integer"
                },
                "function_count": {
                    "type": "integer"
                },
                "lines_of_code": {
                    "type": "integer"
                },
                "max_complexity": {
                    "type": "integer"
                },
                "total_complexity": {
                    "type": "integer"
                },
                "type_count": {
                    "type": "integer"
                }
            }
        },
        "analyzer.Diagnostic": {
            "type": "object",
            "properties": {
                "column": {
                    "type": "integer"
                },
                "file": {
                    "type": "string"
                },
                "line": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "severity": {
                    "description": "\"error\" or \"warning\"",
                    "type": "string"
                }
            }
        },
        "analyzer.FormatCodeInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "analyzer.FormatCodeOutput": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "formatted_code": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "analyzer.FunctionMetrics": {
            "type": "object",
            "properties": {
                "cyclomatic_complexity": {
                    "type": "integer"
                },
                "line": {
                    "type": "integer"
                },
                "lines_of_code": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "analyzer.GetSymbolsInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "filter": {
                    "type": "string"
                }
            }
        },
        "analyzer.GetSymbolsOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "symbols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analyzer.Symbol"
                    }
                }
            }
        },
        "analyzer.Symbol": {
            "type": "object",
            "properties": {
                "column": {
                    "type": "integer"
                },
                "kind": {
                    "description": "\"function\", \"type\", \"const\", \"var\", \"method\", \"struct\", \"interface\"",
                    "type": "string"
                },
                "line": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "receiver": {
                    "description": "For methods",
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "type_name": {
                    "description": "For methods, fields",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7300",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Go Analyzer API",
	Description:      "Go code analysis tools with auto-generated OpenAPI documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
